 program test_cufft
    use, intrinsic :: iso_c_binding 
    ! use filter
    use cufft_m
    use cudafor
    use cpu_timer
    use dimen
    use precision
    use derivative
    use divergence
    ! use filter_cpu
    implicit none


    real(fp),dimension(nx,ny,nz2) :: txx_host,txy_host,txz_host,tyy_host,tyz_host,tzz_host 
    real(fp),dimension(nx,ny,nz2),device :: divtx,divty,divtz,txx,txy,txz,tyy,tyz,tzz 
    integer,parameter :: nt = 10000  
    integer istat,i,j,k,t
    type(c_ptr) plan_batch(2)
    REAL(fp), POINTER, DIMENSION(:) :: null_ptr => NULL ()


    type (cudaEvent) :: startEvent, stopEvent
    real :: time,time_cpu,max_error
    real(fp) :: wctime1,wctime2
    ! include 'dimen.h'

    !---------------------------------------------------------------------------
    ! GPU code
    !---------------------------------------------------------------------------

    call random_number(txx_host)
    call random_number(txy_host)
    call random_number(txz_host)
    call random_number(tyy_host)
    call random_number(tyz_host)
    call random_number(tzz_host)

    txx = txx_host
    txy = txy_host
    txz = txz_host
    tyy = tyy_host
    tyz = tyz_host
    tzz = tzz_host
    ! Create cuda runtime event
    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    ! Create fft plan
    call cufftPlanMany(plan_batch(1),2,(/ny,nx/),null_ptr,0,0,null_ptr,0,0,cufft_D2Z,nzb) 
    call cufftPlanMany(plan_batch(2),2,(/ny,nx/),null_ptr,0,0,null_ptr,0,0,cufft_Z2D,nzb)
        
    istat = cudaEventRecord(startEvent, 0)

    call divstress(divtx,txx,txy,txz,1,1,plan_batch)    ! w node
    do t = 2,Nt+1
        print *,t
        call divstress(divtx,txx,txy,txz,1,t,plan_batch)    ! w node
        call divstress(divty,txy,tyy,tyz,1,t,plan_batch)    ! w node
        call divstress(divtz,txz,tyz,tzz,0,t,plan_batch)    ! uv node
    end do   
    istat = cudaEventRecord(stopEvent, 0)
    istat = cudaEventSynchronize(stopEvent)
    istat = cudaEventElapsedTime(time, startEvent, stopEvent)

    call cufftDestroy(plan_batch(1))
    call cufftDestroy(plan_batch(2))   

    ! u_filtered = u 
    ! dudx_filtered = dudx

    WRITE (*,*) 'GPU Speedup: ', time/nt, ' ms'
    ! !---------------------------------------------------------------------------
    ! ! cpu code
    ! !---------------------------------------------------------------------------
    ! call ddxy_filter_cpu(u_host,dudx_host,dudy_host,0)
    ! call get_walltime(wctime1)
    ! ! CALL CPU_TIME ( time_begin ) 
    ! do t = 1,Nt
    !     call ddxy_filter_cpu(u_host,dudx_host,dudy_host,1)
    ! end do
    ! call get_walltime(wctime2)

    ! max_error = maxval(abs(dudx_host(:,:,2:nzb+1)-dudx_filtered(:,:,2:nzb+1)))
    ! print *,'Max error',max_error
    
    ! time_cpu = (wctime2 - wctime1)
    ! WRITE (*,*) 'GPU Speedup: ', time_cpu/time*1000 
   
end program test_cufft

