 program test_cufft
    use, intrinsic :: iso_c_binding 
    ! use filter
    use cufft_m
    use cudafor
    use cpu_timer
    use dimen
    implicit none

    real(fp),dimension(nx,ny,nz2) :: u_host,v_host,w_host
    real(fp),dimension(nx,ny,nz2),device :: u,v,w

    complex(fp), dimension(nx/2+1,ny,nz2),device :: u_hat,v_hat,w_hat
    complex(fp), dimension(nx/2+1,ny,nz2) :: u_hat_host,v_hat_host,w_hat_host

    real(fp),dimension(nx,ny,nz2,3) :: U_i_host
    real(fp),dimension(nx,ny,nz2,3),device :: U_i
    complex(fp), dimension(nx/2+1,ny,nz2,3),device :: U_i_hat
    complex(fp), dimension(nx/2+1,ny,nz2,3) :: U_i_hat_host
    
    integer,parameter :: nt = 1000   
    integer istat,i,j,k,t
    type(c_ptr) plan_batch(2),plan_batch_uvw(2),plan_batch_advance_layout(2)
    REAL(fp), POINTER, DIMENSION(:) :: null_ptr => NULL ()


    type (cudaEvent) :: startEvent, stopEvent
    real :: time,time1,time_cpu,max_error
    real(fp) :: wctime1,wctime2
    ! include 'dimen.h'

    call random_number(u_host)
    u = u_host

    call random_number(v_host)
    v = v_host

    call random_number(w_host)
    w = w_host

    !---------------------------------------------------------------------------
    ! GPU code
    !---------------------------------------------------------------------------

    ! Create cuda runtime event
    istat = cudaEventCreate(startEvent)
    istat = cudaEventCreate(stopEvent)

    ! Create fft plan
        
    !---------------------------------------------------------------------------
    ! Base line: 3 batch fft for u,v,w
    !---------------------------------------------------------------------------

    call cufftPlanMany(plan_batch(1),2,(/ny,nx/),null_ptr,0,0,null_ptr,0,0,cufft_D2Z,nz2) 
    call cufftPlanMany(plan_batch(2),2,(/ny,nx/),null_ptr,0,0,null_ptr,0,0,cufft_Z2D,nz2)

    istat = cudaEventRecord(startEvent, 0)

    do t = 1,Nt
        call cufftExec(plan_batch(1),u,u_hat)
        call cufftExec(plan_batch(1),v,v_hat)
        call cufftExec(plan_batch(1),w,w_hat)
    end do   
    istat = cudaEventRecord(stopEvent, 0)
    istat = cudaEventSynchronize(stopEvent)
    istat = cudaEventElapsedTime(time, startEvent, stopEvent)

    u_hat_host = u_hat
    v_hat_host = v_hat
    w_hat_host = w_hat

    !---------------------------------------------------------------------------
    ! Stack the u,v,w in the 4th dimentsion and do 1 batch FFT (adv mem layout)
    !---------------------------------------------------------------------------
    call cufftPlanMany(plan_batch(1),2,(/ny,nx/),(/ny,nx/),1,nx*ny,(/ny,nx/2+1/),1,(nx/2+1)*ny,cufft_D2Z,nz2*3) 
    call cufftPlanMany(plan_batch(2),2,(/ny,nx/),(/ny,nx/),1,nx*ny,(/ny,nx/2+1/),1,(nx/2+1)*ny,cufft_D2Z,nz2*3)

    U_i(:,:,:,1) = u
    U_i(:,:,:,2) = v
    U_i(:,:,:,3) = w

    istat = cudaEventRecord(startEvent, 0)
    do t = 1,Nt
        call cufftExec(plan_batch(1),U_i,U_i_hat)
    end do   
    istat = cudaEventRecord(stopEvent, 0)
    istat = cudaEventSynchronize(stopEvent)
    istat = cudaEventElapsedTime(time1, startEvent, stopEvent)

    U_i_hat_host = U_i_hat

    print *,maxval(abs(U_i_hat_host(:,:,:,1) - u_hat_host))
    print *,maxval(abs(U_i_hat_host(:,:,:,2) - v_hat_host))
    print *,maxval(abs(U_i_hat_host(:,:,:,3) - w_hat_host))
    

    call cufftDestroy(plan_batch(1))
    call cufftDestroy(plan_batch(2))   

    call cufftDestroy(plan_batch_uvw(1))
    call cufftDestroy(plan_batch_uvw(2))   

    WRITE (*,*) '3 component batch ffts/1 stacked batch fft ', time/time1
   
end program test_cufft

