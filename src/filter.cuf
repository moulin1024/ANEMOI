module filter
    use iso_c_binding
    use precision
    use dimen
    contains
    subroutine ddxy_filter(f,dfdx,dfdy,t,plan)
        !---------------------------------------------------------------------------
        ! declaration
        !---------------------------------------------------------------------------
        use cufft_m 
        use cudafor
        implicit none 
        ! Input: velocity field
        real(fp), dimension(nx,ny,nz2),intent(inout),device :: f,dfdx, dfdy
        complex(fp), dimension(:,:,:),allocatable,device :: f_hat,dfdx_hat,dfdy_hat
        ! fft plan
        type(c_ptr) :: plan(2)
        integer :: istat,k,t
        ! Cuda variable
        type(dim3) :: grid, tBlock

        grid= dim3(int((nx/2+1)/32)+1,ny,nzb)
        tBlock= dim3(32,1,1)

        save f_hat,dfdx_hat,dfdy_hat
        !---------------------------------------------------------------------------
        ! main code
        !---------------------------------------------------------------------------
    
        !---------------------------------------------------------------------------
        ! init
        if (t.eq.1) then
            allocate(f_hat(nx/2+1,ny,nzb))
            allocate(dfdx_hat(nx/2+1,ny,nzb))
            allocate(dfdy_hat(nx/2+1,ny,nzb))
        endif
        
        !---------------------------------------------------------------------------
        ! Forward fft
        call  cufftExec(plan(1),f(:,:,2:nzb+1),f_hat)
        
        !---------------------------------------------------------------------------
        ! ! Apply sharp spectral filter
        call ddxy_filter_kernel<<<grid, tBlock>>>(f_hat,dfdx_hat,dfdy_hat)
        ! !---------------------------------------------------------------------------
        ! ! Backward fft
        call  cufftExec(plan(2),f_hat,f(:,:,2:nzb+1))
        call  cufftExec(plan(2),dfdx_hat,dfdx(:,:,2:nzb+1)) 
        call  cufftExec(plan(2),dfdy_hat,dfdy(:,:,2:nzb+1)) 
        
    end subroutine ddxy_filter

    subroutine filter_3d(f_hat,filterRadius,plan,t,flag)
        use, intrinsic :: iso_c_binding 
        use cufft_m 
        use cudafor
        implicit none
        real(fp), dimension(nx,ny,nz2),intent(inout),device :: f_hat
        integer,intent(in) :: t,flag
        real(fp),intent(in),value :: filterRadius
        REAL(fp), POINTER, DIMENSION(:) :: null_ptr => NULL ()
        type(c_ptr) :: plan(2)
        complex(fp),dimension(:,:,:),allocatable,device :: f_hat_ft
        type(dim3) :: grid, tBlock

        grid=dim3(int((nx/2+1)/32)+1,ny,nzb)
        tBlock= dim3(32,1,1)

        save f_hat_ft

        if(t == 1 .and. flag == 0) then
            allocate(f_hat_ft(nx/2+1,ny,nzb))
        end if
        call cufftExec(plan(1),f_hat(:,:,2:nzb+1),f_hat_ft)
        call filter_kernel<<<grid,tBlock>>>(f_hat_ft,filterRadius)
        call cufftExec(plan(2),f_hat_ft,f_hat(:,:,2:nzb+1))

    end subroutine filter_3d

    subroutine filter_2dsl(f_filtered,f,t,plan_2d)

        !---------------------------------------------------------------------------
        ! declaration
        !---------------------------------------------------------------------------
        use cudafor
        use cufft_m
        implicit none
    
        integer :: i,j,k,ii,jj,t,flag,iret,istat
        type(c_ptr) :: plan_2d(2)
    
        real(fp),dimension(nx,ny),intent(in),device :: f
        real(fp),dimension(nx,ny),intent(out),device :: f_filtered
        complex(fp), dimension(:,:),allocatable,device :: f_hat
        
        type(dim3) :: grid, tBlock
        grid= dim3(int((nx/2+1)/32)+1,ny,1)
        tBlock= dim3(32,1,1)
        
        save f_hat
    
        !---------------------------------------------------------------------------
        ! main code
        !---------------------------------------------------------------------------
    
        !---------------------------------------------------------------------------
        ! init

        if (t.eq.1) then
            allocate(f_hat(nx/2+1,ny))
        end if
        !---------------------------------------------------------------------------
        ! compute
        ! forward fft --> f
        call  cufftExec(plan_2d(1),f,f_hat)
        ! Apply sharp spectral cutoff. Note: square cutoff
        call filter_kernel_2d<<<grid, tBlock>>>(f_hat)
        ! backward fft --> f
        call cufftExec(plan_2d(2),f_hat,f_filtered)
        
    end subroutine filter_2dsl

    attributes(global) subroutine ddxy_filter_kernel(f_hat,dfdx_hat,dfdy_hat)
        implicit none
        complex(fp), dimension(nx/2+1,ny,nz2),intent(inout) :: f_hat
        complex(fp), dimension(nx/2+1,ny,nz2),intent(inout) :: dfdx_hat,dfdy_hat
        integer :: i,j,k,ii,jj
        i = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        j = (blockIdx%y - 1) * blockDim%y + threadIdx%y
        k = (blockIdx%z - 1) * blockDim%z + threadIdx%z
        ! k = k + 1   ! k = 2,nzb + 1

        if (i <= nx/2+1) then
            !---------------------------------------------------------------------------
            ! Scale back the fft
            f_hat(i,j,k) = f_hat(i,j,k)*inxny
            
            !---------------------------------------------------------------------------
            ! Preparing sharp spectral cut-off
            ! Shift wave number
            ii = i - 1
            jj = j - 1
            if (jj > int(ny/2)) then
                jj = jj-ny
            end if
            jj = jj*l_r
            
            !---------------------------------------------------------------------------
            ! Apply sharp spectral cut-off
            call spec_box_cutoff(f_hat,fgr,i,j,k)

            !---------------------------------------------------------------------------
            ! Apply sharp spectral cut-off
            ! dfdx_hat
            dfdx_hat(i,j,k) = dcmplx(aimag(f_hat(i,j,k))*(-1.0), &
                dble(f_hat(i,j,k)))*ii
            ! dfdy_hat
            dfdy_hat(i,j,k) = dcmplx(aimag(f_hat(i,j,k))*(-1.0), &
                dble(f_hat(i,j,k)))*jj
        end if

    end subroutine ddxy_filter_kernel

    attributes(global) subroutine filter_kernel_2d(f_hat)
        ! 2d Filter at the wall
        implicit none
        complex(fp), dimension(nx/2+1,ny),intent(inout) :: f_hat
        integer :: i,j,ii,jj
        i = (blockIdx%x - 1) * blockDim%x + threadIdx%x;
        j = (blockIdx%y - 1) * blockDim%y + threadIdx%y;
        ! Scale back the fft
        if (i<=nx/2+1) then
            f_hat(i,j) = f_hat(i,j)*inxny
            ! ! Shift wave number
            ii = i - 1
            jj = j - 1
            if(jj.gt.int(nx/2)) jj=jj-ny
            jj=jj*l_r
            if (ii >= floor(nx/(2*fgr*tfr)))then
                f_hat(i,j)= dcmplx(0.0_fp)
            ! filter y
            elseif(abs(jj) >= floor(l_r*ny/(2*fgr*tfr)))then
                f_hat(i,j)= dcmplx(0.0_fp)
            end if
        end if
    end subroutine filter_kernel_2d

    attributes(global) subroutine filter_kernel(f_hat_ft,filterRadius)
        implicit none
        complex(fp), dimension(nx/2+1,ny,nz2),intent(inout) :: f_hat_ft
        real(fp),intent(in),value :: filterRadius
        integer :: i,j,k,ii,jj
        i = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        j = (blockIdx%y - 1) * blockDim%y + threadIdx%y
        k = (blockIdx%z - 1) * blockDim%z + threadIdx%z
        ! Scale back the fft
        f_hat_ft(i,j,k) = f_hat_ft(i,j,k)*inxny
        if (i<=nx/2+1) then
            call spec_box_cutoff(f_hat_ft,filterRadius,i,j,k)
        end if
    end subroutine filter_kernel
    

    attributes(device) subroutine spec_box_cutoff(f_hat,filter,i,j,k)
        implicit none
        complex(fp), dimension(nx/2+1,ny,nz2),intent(inout) :: f_hat
        real(fp),intent(in) :: filter
        integer,intent(in) :: i,j,k
        integer :: ii,jj

        !---------------------------------------------------------------------------
        ! Preparing sharp spectral cut-off
        ! Shift wave number
        ii = i - 1
        jj = j - 1
        if(jj >= nint(ny/2.0)) jj = jj-ny
        jj = jj*l_r

        !---------------------------------------------------------------------------
        ! Apply sharp spectral cut-off
        ! filter x
        if (ii      >= nint(nx/(2.0*filter)) .or. &
            abs(jj) >= nint(l_r*ny/(2.0*filter))) then
            f_hat(i,j,k)=dcmplx(0._fp)
        end if
    end subroutine spec_box_cutoff

end module filter