! 
!     Copyright (c) 2017, NVIDIA CORPORATION.  All rights reserved.
!
! NVIDIA CORPORATION and its licensors retain all intellectual property
! and proprietary rights in and to this software, related documentation
! and any modifications thereto.
!
!
!    These example codes are a portion of the code samples from the companion
!    website to the book "CUDA Fortran for Scientists and Engineers":
!
! http://store.elsevier.com/product.jsp?isbn=9780124169708
!

!
! Define the INTERFACE to the NVIDIA CUFFT routines
!
module cufft_m

    integer, public :: CUFFT_FORWARD = -1
    integer, public :: CUFFT_INVERSE =  1
    integer, public :: CUFFT_R2C = Z'2a' ! Real to Complex (interleaved)
    integer, public :: CUFFT_C2R = Z'2c' ! Complex (interleaved) to Real
    integer, public :: CUFFT_C2C = Z'29' ! Complex to Complex, interleaved
    integer, public :: CUFFT_D2Z = Z'6a' ! Double to Double-Complex
    integer, public :: CUFFT_Z2D = Z'6c' ! Double-Complex to Double
    integer, public :: CUFFT_Z2Z = Z'69' ! Double-Complex to Double-Complex
  
  
    interface cufftDestroy
       subroutine cufftDestroy(plan) bind(C,name='cufftDestroy') 
         use iso_c_binding
         type(c_ptr),value:: plan
       end subroutine cufftDestroy
    end interface cufftDestroy
    
    interface cufftSetStream
       subroutine cufftSetStream(plan, stream) bind(C,name='cufftSetStream') 
         use iso_c_binding
         use cudafor
         type(c_ptr),value:: plan
         integer(kind=cuda_stream_kind),value:: stream
       end subroutine cufftSetStream
    end interface cufftSetStream
    
    interface cufftExec
       
       subroutine cufftExecC2C(plan, idata, odata, direction) &
            bind(C,name='cufftExecC2C') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         integer(c_int),value:: direction
         !pgi$ ignore_tr idata,odata
         complex(singlePrecision),device:: idata(*),odata(*)
       end subroutine cufftExecC2C
       
       subroutine cufftExecZ2Z(plan, idata, odata, direction) &
            bind(C,name='cufftExecZ2Z') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         integer(c_int),value:: direction
         !pgi$ ignore_tr idata,odata
         complex(doublePrecision),device:: idata(*),odata(*)
       end subroutine cufftExecZ2Z
  
       subroutine cufftExecR2C(plan, idata, odata) &
            bind(C,name='cufftExecR2C') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         integer(c_int),value:: direction
         !pgi$ ignore_tr idata,odata
         real(singlePrecision),device:: idata(*)
         complex(singlePrecision),device:: odata(*)
       end subroutine cufftExecR2C
  
       subroutine cufftExecD2Z(plan, idata, odata) &
            bind(C,name='cufftExecD2Z') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         integer(c_int),value:: direction
         !pgi$ ignore_tr idata,odata
         real(doublePrecision),device:: idata(*)
         complex(doublePrecision),device:: odata(*)
       end subroutine cufftExecD2Z

        subroutine cufftExecC2R(plan, idata, odata) &
                bind(C,name='cufftExecC2R') 
            use iso_c_binding
            use precision
            type(c_ptr),value:: plan
            integer(c_int),value:: direction
            !pgi$ ignore_tr idata,odata
            complex(singlePrecision),device:: idata(*)
            real(singlePrecision),device:: odata(*)
        end subroutine cufftExecC2R

        subroutine cufftExecZ2D(plan, idata, odata) &
                bind(C,name='cufftExecZ2D') 
            use iso_c_binding
            use precision
            type(c_ptr),value:: plan
            integer(c_int),value:: direction
            !pgi$ ignore_tr idata,odata
            complex(doublePrecision),device:: idata(*)
            real(doublePrecision),device:: odata(*)
        end subroutine cufftExecZ2D
  
       subroutine cufftExecR2Cinplace(plan, idata, odata) &
            bind(C,name='cufftExecR2C') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         integer(c_int),value:: direction
         !pgi$ ignore_tr idata,odata
         real(singlePrecision),device:: idata(*)
         real(singlePrecision),device:: odata(*)
       end subroutine cufftExecR2Cinplace
       
       subroutine cufftExecD2Zinplace(plan, idata, odata) &
            bind(C,name='cufftExecD2Z') 
         use iso_c_binding
         use precision
         type(c_ptr),value:: plan
         !pgi$ ignore_tr idata,odata
         real(doublePrecision),device:: idata(*)
         real(doublePrecision),device:: odata(*)
       end subroutine cufftExecD2Zinplace
       
    end interface cufftExec
  
    interface cufftPlan1d
       subroutine cufftPlan1d(plan, nx, type, batch) &
            bind(C,name='cufftPlan1d') 
         use iso_c_binding
         type(c_ptr):: plan
         integer(c_int),value:: nx, batch,type
       end subroutine cufftPlan1d
    end interface cufftPlan1d
    
    
    interface cufftPlanMany
       subroutine cufftPlanMany(plan, rank, n, inembed, istride, idist, & 
            onembed, ostride, odist,  &
            type, batch) bind(C,name='cufftPlanMany')
         use iso_c_binding
         implicit none
         !pgi$ ignore_tkr n, inembed, onembed       
         type(c_ptr) :: plan
         integer(c_int) :: n, inembed, onembed
         integer(c_int), value:: rank, istride, ostride, idist, odist, type, batch
       end subroutine cufftPlanMany
    end interface cufftPlanMany
    
    interface cufftPlan2d
       subroutine cufftPlan2d(plan, nx, ny, type) &
            bind(C,name='cufftPlan2d')
         use iso_c_binding
         type(c_ptr):: plan
         integer(c_int),value:: nx, ny, type
       end subroutine cufftPlan2d
    end interface cufftPlan2d

    contains 

    subroutine get_batchfft_plan(plan,dim)
        use dimen
        use iso_c_binding
        implicit none

        type(c_ptr),intent(inout) :: plan(2)
        integer,intent(in) :: dim

        if (fp==singlePrecision) then
            call cufftPlanMany(plan(1),2,(/ny,nx/),(/ny,nx/),1,nx*ny,(/ny,nx/2+1/),1,(nx/2+1)*ny,cufft_R2C,nz2*dim) 
            call cufftPlanMany(plan(2),2,(/ny,nx/),(/ny,nx/2+1/),1,(nx/2+1)*ny,(/ny,nx/),1,nx*ny,cufft_C2R,nz2*dim)
        else 
            call cufftPlanMany(plan(1),2,(/ny,nx/),(/ny,nx/),1,nx*ny,(/ny,nx/2+1/),1,(nx/2+1)*ny,cufft_D2Z,nz2*dim) 
            call cufftPlanMany(plan(2),2,(/ny,nx/),(/ny,nx/2+1/),1,(nx/2+1)*ny,(/ny,nx/),1,nx*ny,cufft_Z2D,nz2*dim)
        end if
   end subroutine get_batchfft_plan

    subroutine get_2dfft_plan(plan)
        use dimen
        use iso_c_binding
        implicit none
        type(c_ptr),intent(inout) :: plan(2)
        if (fp==singlePrecision) then
            call cufftPlan2d(plan(1),ny,nx,CUFFT_R2C)
            call cufftPlan2d(plan(2),ny,nx,CUFFT_C2R)
        else 
            call cufftPlan2d(plan(1),ny,nx,CUFFT_D2Z)
            call cufftPlan2d(plan(2),ny,nx,CUFFT_Z2D)
        end if
    end subroutine get_2dfft_plan
  end module cufft_m
  
  