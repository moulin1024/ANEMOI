module convection
use dimen
use precision
contains
attributes(global) subroutine convec(c_vec,u_vec,dudy,dudz,dvdx,dvdz,dwdx,dwdy)
    ! ------------------------------------------------------------------------
    ! declaration
    ! ------------------------------------------------------------------------
    implicit none
    real(fp),dimension(nx,ny,nz2,3),intent(out) :: c_vec
    real(fp),dimension(nx,ny,nz2,3),intent(in)  :: u_vec
    real(fp),dimension(nx,ny,nz2),intent(in)  :: dudy,dudz,dvdx,dvdz,dwdx,dwdy
    
    real(fp) arg1, arg2a, arg2b, arg2

    integer i,j,k

    ! ------------------------------------------------------------------------
    ! main code
    ! ------------------------------------------------------------------------

    i = (blockIdx%x - 1) * blockDim%x + threadIdx%x
    j = (blockIdx%y - 1) * blockDim%y + threadIdx%y
    k = (blockIdx%z - 1) * blockDim%z + threadIdx%z

    if (k>1 .and. k<nz2) then
        ! ------------------------------------------------------------------------
        ! cx
        arg1  = u_vec(i,j,k  ,2) * (dudy(i,j,k  ) - dvdx(i,j,k  ))
        arg2a = u_vec(i,j,k+1,3) * (dudz(i,j,k+1) - dwdx(i,j,k+1))
        arg2b = u_vec(i,j,k  ,3) * (dudz(i,j,k  ) - dwdx(i,j,k  ))
        c_vec(i,j,k,1)=arg1+0.5_fp*(arg2a+arg2b)
        ! ------------------------------------------------------------------------
        ! cy
        arg1  = u_vec(i,j,k  ,1) * (dvdx(i,j,k  ) - dudy(i,j,k  ))
        arg2a = u_vec(i,j,k+1,3) * (dvdz(i,j,k+1) - dwdy(i,j,k+1))
        arg2b = u_vec(i,j,k  ,3) * (dvdz(i,j,k  ) - dwdy(i,j,k  ))
        c_vec(i,j,k,2)=arg1+0.5_fp*(arg2a+arg2b)
        ! ------------------------------------------------------------------------
        ! cz
        arg1 = (0.5_fp*(u_vec(i,j,k,1) + u_vec(i,j,k-1,1))) * (dwdx(i,j,k)-dudz(i,j,k))
        arg2 = (0.5_fp*(u_vec(i,j,k,2) + u_vec(i,j,k-1,2))) * (dwdy(i,j,k)-dvdz(i,j,k))
        c_vec(i,j,k,3) = arg1+arg2
    end if

end subroutine convec
end module convection