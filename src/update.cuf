module update_m

    use precision
    use dimen
    use cudafor
    use mpi
    contains

subroutine update(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),device,intent(inout) :: u
    integer,intent(in) :: me,nall

    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 

            if (me==0) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            else

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            endif
        else
            if (me==0) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            else

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            endif
        end if
    endif

end subroutine update

subroutine update_cpu(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),intent(inout) :: u
    integer,intent(in) :: me,nall

    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 

            if (me==0) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            else

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            endif
        else
            if (me==0) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            else

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            endif
        end if
    endif

end subroutine update_cpu

subroutine update_uv(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),device,intent(inout) :: u
    integer,intent(in) :: me,nall


    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_send(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,nall,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            else

                call mpi_recv(u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            endif
        else
            if (me==0) then

                call mpi_send(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,nall,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            else

                call mpi_recv(u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            endif
        end if
    endif

end subroutine update_uv

subroutine update_uv_async(u,request,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),device,intent(inout) :: u
    integer,intent(inout) :: request
    integer,intent(in) :: me,nall

    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_isend(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,nall,request,ierr)

            elseif (me<=nprocs-2) then


                call mpi_isend(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,nall,request,ierr)
                call mpi_irecv(u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,request,ierr)
                
            else

                call mpi_irecv(u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,request,ierr)

            endif
        else
            if (me==0) then

                call mpi_isend(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,nall,request,ierr)

            elseif (me<=nprocs-2) then

                call mpi_isend(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,nall,request,ierr)
                call mpi_irecv(u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,request,ierr)
                
            else

                call mpi_irecv(u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,request,ierr)

            endif
        end if
    endif

end subroutine update_uv_async

subroutine update_w(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),device :: u
    integer :: me,nall
    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            else

                call mpi_send(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,nall,ierr)

            endif
        else
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            else

                call mpi_send(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,nall,ierr)

            endif
        end if
    endif

end subroutine update_w

subroutine update_w_async(u,request,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),device :: u
    integer,intent(inout) :: request
    integer :: me,nall
    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)
                ! call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                !     u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

                call mpi_Isend(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,nall,request,ierr)
            else

                call mpi_Isend(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,nall,request,ierr)

            endif
        else
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            else

                call mpi_send(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,nall,ierr)

            endif
        end if
    endif

end subroutine update_w_async

subroutine update_uv_cpu(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2),intent(inout) :: u
    integer,intent(in) :: me,nall


    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_send(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,nall,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_REAL,me+1,me+1,&
                    u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            else

                call mpi_recv(u(1,1,1),nx*ny, MPI_REAL,me-1,me,nall,status2,ierr)

            endif
        else
            if (me==0) then

                call mpi_send(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,nall,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,nzb+1),nx*ny, MPI_DOUBLE_PRECISION,me+1,me+1,&
                    u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            else

                call mpi_recv(u(1,1,1),nx*ny, MPI_DOUBLE_PRECISION,me-1,me,nall,status2,ierr)

            endif
        end if
    endif

end subroutine update_uv_cpu

subroutine update_w_cpu(u,me,nall)

    implicit none
    real(fp), dimension(nx,ny,nz2) :: u
    integer :: me,nall
    if(nprocs.gt.1)then

        if (fp==singlePrecision) then 
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,&
                    u(1,1,nzb+2),nx*ny, MPI_REAL,me+1,me,nall,status2,ierr)

            else

                call mpi_send(u(1,1,2),nx*ny, MPI_REAL,me-1,me-1,nall,ierr)

            endif
        else
            if (me==0) then

                call mpi_recv(u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            elseif (me<=nprocs-2) then

                call mpi_sendrecv(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,&
                    u(1,1,nzb+2),nx*ny, MPI_DOUBLE_PRECISION,me+1,me,nall,status2,ierr)

            else

                call mpi_send(u(1,1,2),nx*ny, MPI_DOUBLE_PRECISION,me-1,me-1,nall,ierr)

            endif
        end if
    endif

end subroutine update_w_cpu

end module update_m
