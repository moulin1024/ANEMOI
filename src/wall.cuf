module wall
    use cudafor
    use precision
    use dimen
    use filter
contains
    attributes(global) subroutine log_law(txz_wall,tyz_wall,dudz_wall,dvdz_wall,ustar,u_hat,v_hat,zo)
        implicit none
        real(fp),dimension(nx,ny),intent(inout) :: txz_wall,tyz_wall,dudz_wall,dvdz_wall
        real(fp),dimension(nx,ny),intent(out) :: ustar
        real(fp), dimension(nx,ny),intent(in) :: u_hat,v_hat   ! filtered velocity
        real(fp),dimension(nx,ny),intent(in) :: zo  ! Roughness
        real(fp) :: denom,mean_hori_velo
        integer :: i,j

        i = (blockIdx%x - 1) * blockDim%x + threadIdx%x
        j = (blockIdx%y - 1) * blockDim%y + threadIdx%y
        ! Horizontal velocity
        mean_hori_velo = sqrt(u_hat(i,j)**2+v_hat(i,j)**2)
        ustar(i,j) = mean_hori_velo * vonk / log(0.5_fp*dz*z_i/zo(i,j))
        ! Wall stress
        ! txz(i,j,2) and tyz(i,j,2)
        txz_wall(i,j)= - ustar(i,j)**2*u_hat(i,j)/mean_hori_velo
        tyz_wall(i,j)= - ustar(i,j)**2*v_hat(i,j)/mean_hori_velo

        ! ! dudz(i,j,2) and dvdz(i,j,2)
        dudz_wall(i,j)=u_hat(i,j)*ustar(i,j)/(mean_hori_velo*vonk*0.5_fp*dz)
        dvdz_wall(i,j)=v_hat(i,j)*ustar(i,j)/(mean_hori_velo*vonk*0.5_fp*dz)

    end subroutine log_law

    subroutine wall_stress(tau,dudz_vec,ustar,u_vec,zo,plan_2d)
        implicit none
        type(c_ptr) plan_2d(2)
        
        real(fp),dimension(nx,ny,nz2,6),intent(inout),device :: tau
        real(fp),dimension(nx,ny,nz2,3),intent(inout),device :: dudz_vec
        real(fp),dimension(nx,ny,nz2,3),intent(in),device :: u_vec
        real(fp),dimension(nx,ny),intent(in),device :: zo
        real(fp),dimension(nx,ny),intent(out),device :: ustar
        real(fp),dimension(:,:),allocatable,device :: u_filtered,v_filtered

        integer :: stat_flag = 1
        type(dim3) :: grid, tBlock
        grid= dim3(nx/16,ny/16,1)
        tBlock= dim3(16,16,1)

        save u_filtered,v_filtered,stat_flag
        if (stat_flag /= 0) then
            allocate(u_filtered(nx,ny),STAT=stat_flag)
            allocate(v_filtered(nx,ny),STAT=stat_flag)
        end if
        ! Check
        call filter_2dsl(u_filtered,u_vec(:,:,2,1),plan_2d)
        call filter_2dsl(v_filtered,u_vec(:,:,2,2),plan_2d)
        ! stop
        call log_law<<<grid, tBlock>>>(tau(:,:,2,3),tau(:,:,2,5),dudz_vec(:,:,2,1) ,dudz_vec(:,:,2,2) ,ustar,u_filtered,v_filtered,zo)

    end subroutine wall_stress

end module wall
