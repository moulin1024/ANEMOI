 program test_cufft
    use, intrinsic :: iso_c_binding 
    use cudafor
    use mpi 
    use dimen
    use precision
    use turbine
    ! use turbine_cpu_m
    implicit none

    real(fp),dimension(nx,ny,nz2) :: u_host,v_host,w_host
    real(fp),dimension(nx,ny,nz2) :: u_host2,v_host2,w_host2
    real(fp),dimension(nx,ny,nz2) :: Fx_host,Fy_host,Fz_host, Fx_host1,Fy_host1,Fz_host1
    real(fp), dimension(n_phi,n_r,n_turb) :: sum_ker_u,sum_ker_w
    real(fp) :: thrust_host(n_turb),power_host(n_turb),omega_host(n_turb)
    real(fp), dimension(n_phi,n_r,n_turb) :: CTFx_host,CTFt_host,CTux_host,CTaoa_host

    real(fp), dimension(:,:,:),device,allocatable :: CTFx,CTFt
    real(fp),dimension(:),device,allocatable :: thrust,power,omega
    real(fp),dimension(:,:,:),device,allocatable :: Fx,Fy,Fz
    real(fp),dimension(:,:,:),device,allocatable :: u,v,w
    
    real(fp),dimension(n_phi,n_r,n_turb,2),device :: sum_ker,ctf

    real(fp),dimension(n_phi,n_r,n_turb,2) :: sum_ker_host,ctf_host

    real(fp), dimension(n_turb,4) :: turb_loc_host
    real(fp), dimension(n_turb,4),device :: turb_loc

    real(fp),dimension(3,181) :: alpha_cl_cd
    real(fp),dimension(3,181),device :: alpha_cl_cd_gpu
    integer istat,i,j,k,t
    type(c_ptr) plan_batch(2)
    real(fp),dimension(blade_num,n_r,n_turb,2) :: displacement_host,moment_host,velocity_host   
    integer(kind=cuda_stream_kind) :: stream(3)
    real :: max_error
    integer :: token,request
    integer :: localRank
    character(len=10) :: rankStr
    ! MPI initialization
    
    call GET_ENVIRONMENT_VARIABLE ('OMPI_COMM_WORLD_LOCAL_RANK',rankStr)
    read (rankStr,'(i10)') localRank
    istat = cudaSetDevice (localRank)

    call mpi_init( ierr )
    call mpi_comm_rank( mpi_comm_world, me, ierr )
    call mpi_comm_size( mpi_comm_world, job_np, ierr )
    nall=mpi_comm_world

    call random_number(u_host)
    call random_number(v_host)
    call random_number(w_host)

    !---------------------------------------------------------------------------
    ! GPU code
    !---------------------------------------------------------------------------
    ! t = 1
    print *,'allocate'
    allocate(Fx(nx,ny,nz2),Fy(nx,ny,nz2),Fz(nx,ny,nz2))
    allocate(u(nx,ny,nz2),v(nx,ny,nz2),w(nx,ny,nz2))
    allocate(CTFx(n_phi,n_r,n_turb),CTFt(n_phi,n_r,n_turb))
    allocate(thrust(n_turb),power(n_turb),omega(n_turb))

    t = 1
    u_host = 10
    v_host = 0
    w_host = 0

    u = u_host
    v = v_host
    w = w_host

    omega_host = 2183

    !---------------------------------------------------------------------------
    ! load turbine aero data
    !---------------------------------------------------------------------------

    if (turb_flag > 0) then
        open(unit=199,file='input/turb_loc.dat')
        read(199,*)
        do k=1,n_turb
            read(199,*) turb_loc_host(k,1:5)
        end do
        close(199)
    end if

    do i_turb=1,n_turb
        turb_loc_host(i_turb,1) = turb_loc_host(i_turb,1)/z_i       ! x
        turb_loc_host(i_turb,2) = turb_loc_host(i_turb,2)/z_i       ! y
        turb_loc_host(i_turb,3) = turb_loc_host(i_turb,3)/z_i       ! z
        turb_loc_host(i_turb,4) = turb_loc_host(i_turb,4)/180*pi    ! yaw
        turb_loc_host(i_turb,5) = turb_loc_host(i_turb,5)/180*pi    ! tilt
    end do
    ! Copy to device
    turb_loc = turb_loc_host

    print *,turb_loc_host

        t = 1
        call turbine_force(Fx,Fy,Fz,CTF,power,displacement_host,moment_host,velocity_host,u,v,w,turb_loc,t)
    
        ! t = 1000
        ! call turbine_force(fx,fy,fz,power,u,v,w,turb_loc,t)
    
    Fx_host1 = Fx
    Fy_host1 = Fy
    Fz_host1 = Fz

    call MPI_finalize(ierr)
end program test_cufft

